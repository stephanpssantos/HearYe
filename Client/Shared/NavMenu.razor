@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using HearYe.Client.Data
@using HearYe.Shared
@inject NavigationManager Navigation
@inject StateContainer State
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHearYeService Service

<AuthorizeView>
    <Authorized>
        <nav class="navbar bg-white p-2 border-bottom border-2">
            <div class="container-lg justify-content-center">
                <div class="d-flex justify-content-between align-items-center w-md-75">
                    <div class="d-flex gap-2 align-items-center col-md-4">
                        <a href="/">
                            <img src="OKHand1.svg" class="fs-3 OkSvg1" />
                        </a>
                        <a href="/" class="fs-3 me-3 text-reset text-decoration-none">
                            <strong>Okay</strong>
                        </a>
                        <div class="d-none d-xl-block w-100">
                            <GroupDropDown />
                        </div>
                    </div>
                    @if(State.ActiveLocation == ActiveLocations.Index)
                    {
                       <div class="d-none d-xl-block col-xl-4">
                            <PostTypeSelector />
                       </div> 
                    }
                    <AccountDropDown UserName="@context.User.Identity?.Name" />
                </div>
                <div class="d-flex d-xl-none flex-column align-items-end w-md-75 gap-2 mt-1">
                    <GroupDropDown />
                    @if (State.ActiveLocation == ActiveLocations.Index)
                    {
                        <PostTypeSelector />
                    }
                </div>
            </div>
        </nav>
    </Authorized>
</AuthorizeView>

@code
{
    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    protected override void OnParametersSet()
    {
        if (State.UserDbId is null)
        {
            InitializeState();
        }
    }

    private async void InitializeState()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            string? userDbId = user.Claims.FirstOrDefault(x => x.Type.Equals("extension_DatabaseId"))?.Value;

            // The code below checks that the newUser token claim exists - but it might cause problems.
            // if (user.Claims.FirstOrDefault(x => x.Type.Equals("newUser"))?.Value is not null && userDbId is null)
            if (userDbId is null)
            {
                Navigation.NavigateTo("/newuser");
                return;
            }

            State.UserDbId = userDbId;

            User? userDbInfo = await Service.GetUserAsync(userDbId);

            if (userDbInfo is null)
            {
                Navigation.NavigateTo("/newuser");
                return;
            }

            var userShortcutGroups = await Service.GetMessageGroupShortcutsAsync(userDbInfo.Id);

            State.DefaultGroupId = userDbInfo.DefaultGroupId is null ? 0 : (int)userDbInfo.DefaultGroupId;
            State.UserShortcutGroups = userShortcutGroups ?? new();

            MessageGroup? defaultGroup = null;
            MessageGroup? defaultGroupInShortcutGroups = State.UserShortcutGroups.FirstOrDefault(g => g.Id == State.DefaultGroupId);
            IEnumerable<PostWithUserName>? activeGroupPosts;

            if (State.DefaultGroupId != 0 && defaultGroupInShortcutGroups is not null)
            {
                defaultGroup = defaultGroupInShortcutGroups;
            }
            else if (State.DefaultGroupId != 0)
            {
                defaultGroup = await Service.GetMessageGroupAsync(State.DefaultGroupId);
            }

            // If no authorization to access group or group no longer exists or default not chosen.
            if (defaultGroup is null || State.DefaultGroupId == 0)
            {
                if (userShortcutGroups is not null && userShortcutGroups.Any())
                {
                    var groupId = userShortcutGroups.First().Id.ToString();
                    activeGroupPosts = await Service.GetNewPostsAsync(groupId);
                    State.PostCollection = activeGroupPosts;
                    State.ActiveGroupId = userShortcutGroups.First().Id;
                    State.ActiveGroupName = userShortcutGroups.First().MessageGroupName;
                }
                else
                {
                    State.PostCollection = new List<PostWithUserName>();
                }
                // If no default group chosen and no groups favorited, load nothing.
            }
            else
            {
                activeGroupPosts = await Service.GetNewPostsAsync(State.DefaultGroupId.ToString());
                State.PostCollection = activeGroupPosts;
                State.ActiveGroupId = defaultGroup.Id;
                State.ActiveGroupName = defaultGroup.MessageGroupName;
            }

            State.Initiated = true;
        }
    }
}
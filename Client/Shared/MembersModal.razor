@using HearYe.Client.Data
@using HearYe.Shared;
@inject IHearYeService Service
@inject StateContainer State

<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title">@modalTitle</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
    </div>
    <div class="modal-body">
        @if (bannerMessage is not null && bannerType is not null)
        {
            <div class="alert @bannerType" role="alert">
                @bannerMessage
            </div>
        }
        @if (displayError)
        {
            <p>Error loading user list. Please try again later.</p>
        }
        else if (displayConfirmation)
        {
            <div class="mt-3 mb-3">
                <p>Are you sure you want to remove @confirmationUserName (ID: @confirmationUserId) from the group?</p>
                <div class="d-flex gap-2 justify-content-center">
                    <button class="btn btn-danger" @onclick="ConfirmRemoval">Remove</button>
                    <button class="btn btn-secondary" @onclick="CloseConfirmation">Cancel</button>
                </div>
            </div>
        }
        else if (userList is not null && userList.Any())
        {
            <h4><span class="badge text-bg-dark">Group admins</span></h4>
            <ul class="list-group list-group-flush">
                @foreach (var user in userList.Where(u => u.MessageGroupRoleId == 1))
                {
                    <li class="list-group-item d-flex justify-content-between">
                        <div>
                            <strong>@user.UserName</strong> <span class="text-muted">(ID: @user.UserId)</span>
                        </div>
                        <div class="d-flex gap-2">
                            @if (userRole == 1 && user.UserId != userId)
                            {
                                <div class="dropdown">
                                    <button class="btn btn-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Admin</button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <button class="dropdown-item active" type="button" aria-current="true">Admin</button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item" type="button" @onclick="(() => MakeUserMember(user))">Member</button>
                                        </li>
                                    </ul>
                                </div>
                                <button class="btn btn-danger btn-sm" @onclick="(() => DisplayConfirmation(user))">Remove user</button>
                            }
                        </div>
                    </li>
                }
            </ul>
            <hr class="mt-3 mb-3" />
            <h4><span class="badge text-bg-dark">Group members</span></h4>
            <ul class="list-group list-group-flush">
                @foreach (var user in userList.Where(u => u.MessageGroupRoleId == 2))
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@user.UserName</strong> <span class="text-muted">(ID: @user.UserId)</span>
                        </div>
                        <div class="d-flex gap-2">
                            @if (userRole == 1 && user.Id != userId)
                            {
                                <div class="dropdown">
                                    <button class="btn btn-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Member</button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <button class="dropdown-item" type="button" @onclick="(() => MakeUserAdmin(user))">Admin</button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item active" type="button" aria-current="true">Member</button>
                                        </li>
                                    </ul>
                                </div>
                                <button class="btn btn-danger btn-sm" @onclick="(() => DisplayConfirmation(user))">Remove user</button>
                            }
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <ul class="list-group placeholder-glow">
                <li class="list-group-item placeholder"></li>
                <li class="list-group-item placeholder"></li>
                <li class="list-group-item placeholder"></li>
                <li class="list-group-item placeholder"></li>
            </ul>
        }
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseModal">Close</button>
    </div>
</div>

@code {
    private bool displayError = false;
    private bool displayConfirmation = false;
    private int userRole;
    private int userId;
    private int confirmationUserId;
    private string modalTitle = "Loading...";
    private string? confirmationUserName;
    private string? bannerMessage;
    private string? bannerType;
    private MessageGroupMemberWithName? confirmationUser;
    private IEnumerable<MessageGroupMemberWithName>? userList;

    protected override async Task OnParametersSetAsync()
    {
        if (State.ModalIsOpen && State.MembersModalId > 0)
        {
            userList = await Service.GetMessageGroupMembersAsync(State.MembersModalId);
            bool validDbId = int.TryParse(State.UserDbId, out int userDbId);

            if (userList is null || !validDbId)
            {
                displayError = true;
                return;
            }

            var user = userList.Where(u => u.UserId == userDbId).FirstOrDefault();

            if (State.UserGroups is not null && user is not null && user.MessageGroupRoleId is not null)
            {
                userRole = (int)user.MessageGroupRoleId;
                userId = userDbId;

                MessageGroup? group = State.UserGroups.Where(g => g.Id == State.MembersModalId).FirstOrDefault();
                if (group is not null)
                {
                    modalTitle = group.MessageGroupName + " members";
                }
                else
                {
                    modalTitle = "Group members";
                }
            }
            else
            {
                displayError = true;
                return;
            }

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    private async void MakeUserMember(MessageGroupMemberWithName mgmn)
    {
        MessageGroupMember mgm = new ()
            {
                Id = mgmn.Id,
                MessageGroupId = mgmn.MessageGroupId,
                UserId = mgmn.UserId,
                MessageGroupRoleId = 2,
            };

        var response = await Service.SetMessageGroupRoleAsync(mgm);
        if (response.IsSuccessStatusCode)
        {
            var userToUpdate = userList!.FirstOrDefault(u => u.Id == mgmn.Id);
            if (userToUpdate is not null)
            {
                userToUpdate.MessageGroupRoleId = 2;
            }
        }
        else
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ User role assignment failed. Please try again later.";
        }

        StateHasChanged();
    }

    private async void MakeUserAdmin(MessageGroupMemberWithName mgmn)
    {
        MessageGroupMember mgm = new()
            {
                Id = mgmn.Id,
                MessageGroupId = mgmn.MessageGroupId,
                UserId = mgmn.UserId,
                MessageGroupRoleId = 1,
            };

        var response = await Service.SetMessageGroupRoleAsync(mgm);
        if (response.IsSuccessStatusCode)
        {
            var userToUpdate = userList!.FirstOrDefault(u => u.Id == mgmn.Id);
            if (userToUpdate is not null)
            {
                userToUpdate.MessageGroupRoleId = 1;
            }
        }
        else
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ User role assignment failed. Please try again later.";
        }

        StateHasChanged();
    }

    private void DisplayConfirmation(MessageGroupMemberWithName user)
    {
        displayConfirmation = true;
        confirmationUser = user;
        confirmationUserId = user.UserId;
        confirmationUserName = user.UserName;
    }

    private void CloseConfirmation()
    {
        displayConfirmation = false;
        confirmationUser = null;
        confirmationUserId = 0;
        confirmationUserName = String.Empty;
        StateHasChanged();
    }

    private async void ConfirmRemoval()
    {
        var response = await Service.DeleteMessageGroupMemberAsync(confirmationUser!.Id, State.MembersModalId);
        if (response.IsSuccessStatusCode)
        {
            userList = userList!.Where(u => u.UserId != confirmationUserId).ToList();
        }
        else
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ User removal failed. Please try again later.";
        }

        CloseConfirmation();
    }

    private void CloseModal()
    {
        State.MembersModalId = 0;
        State.ModalIsOpen = false;
    }
}

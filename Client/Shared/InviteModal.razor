@using HearYe.Client.Data
@using HearYe.Shared;
@inject IHearYeService Service
@inject StateContainer State

<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title">Inviting user to @groupName</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
    </div>
    <div class="modal-body">
        @if (bannerMessage is not null && bannerType is not null && !displayConfirmation)
        {
            <div class="alert @bannerType" role="alert">
                @bannerMessage
            </div>
        }
        @if (displayConfirmation)
        {
            <div>
                <div>
                    Invite @invitee!.DisplayName to @(groupName)?
                </div>
                <div class="d-flex gap-2 justify-content-end mt-3">
                    <button class="btn btn-secondary" @onclick="CancelConfirmation">Cancel</button>
                    <button class="btn btn-primary" @onclick="HandleConfirmation">Send invite</button>
                </div>
            </div>
        }
        else
        {
            <EditForm EditContext="@editContext" OnSubmit="@HandleSubmit" class="form">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="inviteeUserId" class="form-label">User ID</label>
                    <InputNumber @bind-Value="newInvite.InvitedUserId" id="inviteeUserId" class="form-control" aria-describedby="inviteHelp" />
                    <div id="inviteHelp" class="form-text">Enter the User ID of the person you would like to invite.</div>
                </div>
                <div class="d-flex justify-content-end gap-2">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="HandleSubmit">Send Invite</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    private MessageGroupInvitation newInvite = new();
    private UserPublicInfo? invitee;
    private EditContext? editContext;
    private string? groupName;
    private string? bannerMessage;
    private string? bannerType;
    private bool displayConfirmation = false;
    private bool confirmationLock = false;

    protected override void OnParametersSet()
    {
        if (State.UserGroups is not null && State.InviteModalId != 0)
        {
            MessageGroup? group = State.UserGroups.Where(g => g.Id == State.InviteModalId).FirstOrDefault();
            if (group is not null)
            {
                groupName = $"{group.MessageGroupName}";
            }
            else
            {
                groupName = $"Unknown (ID: {State.InviteModalId})";
            }
        }
        else
        {
            groupName = "Unknown";
        }
    }

    protected override void OnInitialized()
    {
        editContext = new(newInvite);
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    private async void HandleSubmit()
    {
        bool validDbId = int.TryParse(State.UserDbId, out int userDbId);

        if (!validDbId)
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ Failed to send invite. Please try again later.";
            StateHasChanged();
            return;
        }

        newInvite.MessageGroupId = State.InviteModalId;
        newInvite.InvitingUserId = userDbId;
        newInvite.CreatedDate = DateTimeOffset.Now;

        if (editContext != null && editContext.Validate())
        {
            invitee = await Service.GetUserPublicInfoAsync(newInvite.InvitedUserId);

            if (invitee is null)
            {
                bannerType = "alert-warning";
                bannerMessage = "⚠ Specified user not found.";
            }
            else if (invitee.AcceptGroupInvitations == false)
            {
                bannerType = "alert-info";
                bannerMessage = "Specified user is not currently accepting invitations.";
            }
            else
            {
                displayConfirmation = true;
            }

            StateHasChanged();
            return;
        }
    }

    private async void HandleConfirmation()
    {
        // Prevent multiple clicks while waiting.
        if (confirmationLock)
        {
            return;
        }

        confirmationLock = true;
        string? responseMessage = null;
        HttpResponseMessage response = await Service.NewMessageGroupInvitationAsync(newInvite);

        if (!response.IsSuccessStatusCode)
        {
            responseMessage = await response.Content.ReadAsStringAsync();
        }

        if (responseMessage is not null &&  responseMessage == "Duplicate invitation exists.")
        {
            bannerType = "alert-info";
            bannerMessage = "User has already been invited to this group.";
        }
        else if (responseMessage is not null && responseMessage == "Invited user is already a group member.")
        {
            bannerType = "alert-info";
            bannerMessage = "User is already a group member.";
        }
        else if (!response.IsSuccessStatusCode)
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ Failed to send invite. Please try again later.";
        }
        else
        {
            bannerType = "alert-success";
            bannerMessage = "Invitation sent!";
        }

        newInvite = new();
        editContext = new(newInvite);
        confirmationLock = false;
        invitee = null;
        displayConfirmation = false;
        StateHasChanged();
    }

    private void CancelConfirmation()
    {
        bannerType = null;
        bannerMessage = null;
        invitee = null;
        displayConfirmation = false;
        StateHasChanged();
    }

    private void CloseModal()
    {
        State.MembersModalId = 0;
        State.ModalIsOpen = false;
    }
}

@using HearYe.Client.Data
@using HearYe.Shared
@inject IHearYeService Service
@inject StateContainer State

<div class="d-flex gap-2 align-items-end">
    <span class="text-muted align-self-center">Posts per page: </span>
    <div class="dropdown mt-3 mb-3">
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            @State.PostCount
        </button>
        <ul class="dropdown-menu">
            <li><button class="dropdown-item" type="button" @onclick="(() => SetPostCount(15))">15</button></li>
            <li><button class="dropdown-item" type="button" @onclick="(() => SetPostCount(30))">30</button></li>
            <li><button class="dropdown-item" type="button" @onclick="(() => SetPostCount(50))">50</button></li>
            <li><button class="dropdown-item" type="button" @onclick="(() => SetPostCount(100))">100</button></li>
        </ul>
    </div>
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(previousIsActive() ? "" : "disabled")">
                <a class="page-link" role="button" aria-label="Previous" @onclick="LoadPrevious">
                    Previous
                </a>
            </li>
            <li class="page-item @(nextIsActive() ? "" : "disabled")">
                <a class="page-link" role="button" aria-label="Next" @onclick="LoadNext">
                    Next
                </a>
            </li>
        </ul>
    </nav>
</div>

@code {
    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    private bool previousIsActive()
    {
        return State.PostSkip > 0 ? true : false;
    }

    private bool nextIsActive()
    {
        if (State.PostCollection is null || !State.PostCollection.Any())
        {
            return false;
        }
        return State.PostCollection.Count() > State.PostCount ? true : false;
    }

    private void LoadNext()
    {
        if (!nextIsActive())
        {
            return;
        }

        State.PostSkip += State.PostCount;

        LoadPosts();
    }

    private void LoadPrevious()
    {
        if (!previousIsActive())
        {
            return;
        }

        if (State.PostSkip - State.PostCount < 0)
        {
            State.PostSkip = 0;
        }
        else
        {
            State.PostSkip -= State.PostCount;
        }

        LoadPosts();
    }

    private void SetPostCount(int count)
    {
        State.PostSkip = 0;
        State.PostCount = count;
        LoadPosts();
    }

    private async void LoadPosts()
    {
        IEnumerable<PostWithUserName>? postCollection;

        switch (State.ActivePostType)
        {
            case PostTypes.Acknowledged:
                postCollection = await Service.GetAcknowledgedPostsAsync(State.ActiveGroupId.ToString(), State.PostCount, State.PostSkip);
                break;
            case PostTypes.Stale:
                postCollection = await Service.GetStalePostsAsync(State.ActiveGroupId.ToString(), State.PostCount, State.PostSkip);
                break;
            case PostTypes.New:
            default:
                postCollection = await Service.GetNewPostsAsync(State.ActiveGroupId.ToString(), State.PostCount, State.PostSkip);
                break;
        }

        State.PostCollection = postCollection;
    }
}

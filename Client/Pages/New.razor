@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using HearYe.Client.Data
@using HearYe.Shared
@inject NavigationManager Navigation
@inject IHearYeService service
@attribute [Authorize]

<PageTitle>Hear Ye</PageTitle>

<h1>New Messages</h1>
<div>
    <textarea placeholder="Write a new message" />
    <label for="OldDate">Old on:</label>
    <input type="date" id="OldDate" />
    <button>Post</button>
</div>

<div>
    <span>PostDate</span>
    <div>
        <div>
            <div>
                <span>UserImage</span>
                <span>User.DisplayName says:</span>
            </div>
            <p>
                Post.Message
            </p>
            <p>
                Old news on: Post.StaleDate
            </p>
        </div>
        <div>
            <button>AcknowledgeButton</button>
            <span>Acknowledged by Acknowledgements.Where(acknowledgement => acknowledgement.postid == post.id).Count() person/people.</span>
        </div>
    </div>
</div>

<div>
    <table>
        <tr>
            <td>@demoUser1?.Id.ToString();</td>
            <td>@demoUser1?.AadOid.ToString();</td>
            <td>@demoUser1?.DisplayName;</td>
            <td>@demoUser1?.AcceptGroupInvitations;</td>
            <td>@demoUser1?.IsDeleted</td>
            <td>@demoUser1?.CreatedDate.ToString();</td>
        </tr>
        <tr>
            <td>@demoUser2?.Id.ToString();</td>
            <td>@demoUser2?.AadOid.ToString();</td>
            <td>@demoUser2?.DisplayName;</td>
            <td>@demoUser2?.AcceptGroupInvitations;</td>
            <td>@demoUser2?.IsDeleted</td>
            <td>@demoUser2?.CreatedDate.ToString();</td>
        </tr>
    </table>
    
</div>

@code
{
    private User? demoUser1;
    private User? demoUser2;

    protected async override Task OnParametersSetAsync()
    {
        try
        {
            demoUser1 = await service.GetUserAsync("1");
            demoUser2 = await service.GetUserByOIDAsync("f09cc0b1-f05d-40e0-9684-c4a945d4e7e1");
        }
        catch (AccessTokenNotAvailableException)
        {
            Navigation.NavigateToLogin("authentication/login");
            //exception.Redirect(); Causes issues: interaction_in_progress exception and then loops.
        }
    }
}
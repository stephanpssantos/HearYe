@page "/managegroups"
@layout AltLayout
@using HearYe.Client.Data
@using HearYe.Shared;
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject StateContainer State
@inject IHearYeService Service
@attribute [Authorize]

<PageTitle>Manage Groups</PageTitle>

<div class="container-lg">
    <div class="d-flex flex-column align-items-center">
        <div class="w-md-75">
            <h1 class="mt-3 mb-3">Manage groups</h1>
            <hr />
            @if (bannerMessage is not null && bannerType is not null)
            {
                <div class="alert @bannerType" role="alert">
                    @bannerMessage
                </div>
            }
            <h4>Invitations</h4>
            <div class="form-check form-switch">
                <label for="acceptInvitationToggle" class="form-check-label">Accept new invitations</label>
                <input id="acceptInvitationToggle" class="form-check-input" type="checkbox" role="switch"
                       value="@acceptInvitations" checked="@acceptInvitations" @onchange="ToggleAcceptInvitation" />
            </div>
            <div class="mt-3" />
            <a class="text-reset text-decoration-none" role="button" data-bs-toggle="collapse" data-bs-target="#invitationsSent" 
                aria-expanded="false" aria-controls="invitationsSent" @onclick="ToggleInvitationsSentVisible">
                <h4 class="@(invitationsSentVisible ? "addUpArrow" : "addDownArrow")">Invitations Sent</h4>
            </a>
            <div class="collapse" id="invitationsSent">
                <div class="d-flex flex-column w-100">
                    
                    @if (invitationsSentList is not null && invitationsSentList.Any())
                    {
                        @foreach (var invitation in invitationsSentList)
                        {
                            <div class="card mb-2">
                                <div class="card-body d-flex justify-content-between align-items-center">
                                    <span class="card-text">
                                        @invitation.InvitedUserName invited to @invitation.MessageGroupName
                                    </span>
                                    <button type="button" class="btn btn-danger" @onclick="(() => DeleteInvitation(invitation.Id))">Delete</button>
                                </div>
                            </div>
                        }
                        @if (invitationsSentList.Count() >= 15)
                        {
                            <p class="text-muted">Only the 15 latest invitations are displayed.</p>
                        }
                    }
                </div>
            </div>

        </div>
    </div>
</div>

@code {
    private bool acceptInvitations = true;
    private bool invitationsSentVisible = false;
    private string? bannerMessage;
    private string? bannerType;
    private IEnumerable<MessageGroupInvitationWithNames>? invitationsSentList;
    private IEnumerable<MessageGroupInvitationWithNames>? invitationsReceivedList;
    private User? userInfo;

    protected override async Task OnParametersSetAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
        string? claimDbId = user.Claims.FirstOrDefault(x => x.Type.Equals("extension_DatabaseId"))?.Value;
        bool validDbId = int.TryParse(claimDbId, out int userDbId);

        if (!validDbId)
        {
            Navigation.NavigateTo("/");
            return;
        }

        userInfo = await Service.GetUserAsync(claimDbId!);
        if (userInfo is null)
        {
            Navigation.NavigateTo("/");
            return;
        }

        acceptInvitations = userInfo.AcceptGroupInvitations;

        var invitationList = await Service.GetMessageGroupInvitationsAsync(userDbId);
        if (invitationList is not null)
        {
            invitationsSentList = invitationList
                .Where(i => i.InvitingUserId == userDbId)
                .OrderByDescending(x => x.CreatedDate)
                .Take(15);

            invitationsReceivedList = invitationList
                .Where(i => i.InvitedUserId == userDbId)
                .OrderByDescending(x => x.CreatedDate)
                .Take(15);
        }
    }

    private async void ToggleAcceptInvitation()
    {
        if (userInfo is null)
        {
            return;
        }

        userInfo.AcceptGroupInvitations = !userInfo.AcceptGroupInvitations;
        acceptInvitations = userInfo.AcceptGroupInvitations;
        StateHasChanged();

        var updateSuccessful = await Service.UpdateUserAsync(userInfo.Id, userInfo);

        if (!updateSuccessful.IsSuccessStatusCode)
        {
            userInfo.AcceptGroupInvitations = !userInfo.AcceptGroupInvitations;
            acceptInvitations = userInfo.AcceptGroupInvitations;
            bannerMessage = "⚠ Accept invitation toggle failed. Please try again later.";
            bannerType = "alert-warning";
            StateHasChanged();
        }
    }

    private async void DeleteInvitation(int invitationId)
    {
        var deleteResponse = await Service.DeleteMGInvitationAsync(invitationId);

        if (deleteResponse.IsSuccessStatusCode)
        {
            invitationsSentList = invitationsSentList!.Where(i => i.Id != invitationId).ToList();
            StateHasChanged();
        }
        else
        {
            bannerMessage = "⚠ Invite deletion failed. Please try again later.";
            bannerType = "alert-warning";
            StateHasChanged();
        }
    }

    private void ToggleInvitationsSentVisible()
    {
        invitationsSentVisible = !invitationsSentVisible;
    }
}

@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using HearYe.Client.Data
@using HearYe.Shared
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHearYeService Service
@inject StateContainer State
@attribute [Authorize]

<PageTitle>Hear Ye</PageTitle>

<h1>New Messages</h1>
<div>
    <textarea placeholder="Write a new message" />
    <label for="OldDate">Old on:</label>
    <input type="date" id="OldDate" />
    <button>Post</button>
</div>

<div>
    <span>PostDate</span>
    <div>
        <div>
            <div>
                <span>UserImage</span>
                <span>User.DisplayName says:</span>
            </div>
            <p>
                Post.Message
            </p>
            <p>
                Old news on: Post.StaleDate
            </p>
        </div>
        <div>
            <button @onclick="ClickAThing">AcknowledgeButton</button>
            <span>Acknowledged by Acknowledgements.Where(acknowledgement => acknowledgement.postid == post.id).Count() person/people.</span>
        </div>
    </div>
</div>

@code
{
    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    protected async override Task OnParametersSetAsync()
    {
        if (State is not null && State.UserDbId is null)
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;
            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                string? userDbId = user.Claims.FirstOrDefault(x => x.Type.Equals("extension_DatabaseId"))?.Value;

                // The code below checks that the newUser token claim exists - but it might cause problems.
                // if (user.Claims.FirstOrDefault(x => x.Type.Equals("newUser"))?.Value is not null && userDbId is null)
                if (userDbId is null)
                {
                    Navigation.NavigateTo("/newuser");
                }
                else
                {
                    State.UserDbId = userDbId;
                }
            }
        }
    }

    private async void ClickAThing()
    {
        await Service.GetUserAsync("1");
    }
}
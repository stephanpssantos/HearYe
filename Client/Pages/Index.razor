@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using HearYe.Client.Data
@using HearYe.Shared
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHearYeService Service
@inject StateContainer State
@attribute [Authorize]

<PageTitle>Okay</PageTitle>

<div class="container-lg">
    <div class="d-flex flex-column align-items-center">
        @if (State.ActivePostType == PostTypes.New)
        {
            <div class="w-md-75">
                <NewMessage />
                <h1 class="mt-2 mb-3">New Messages</h1>
            </div>
        }
        else if (State.ActivePostType == PostTypes.Acknowledged)
        {
            <div class="w-md-75">
                <h1 class="mt-2 mb-3">Acknowledged Messages</h1>
            </div>
        }
        else if (State.ActivePostType == PostTypes.Stale)
        {
            <div class="w-md-75">
                <h1 class="mt-2 mb-3">Old Messages</h1>
            </div>
        }

        <div class="w-md-75">
            @if (State.PostCollection is not null && State.PostCollection.Any())
            {
                @foreach (PostWithUserName post in State.PostCollection)
                {
                    <PostTemplate Post="@post" />
                }
            }
            else if (State.PostCollection is not null && !State.PostCollection.Any())
            {
                <h3 class="text-muted">No posts found.</h3>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <div class="placeholder-glow d-flex pt-2 pb-2">
                            <span class="placeholder col-3" />
                            <span class="placeholder col-6" style="visibility: hidden" />
                            <span class="placeholder col-3" />
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text placeholder-glow">
                            <span class="placeholder col-12"></span>
                            <br />
                            <div class="d-flex mt-2">
                                <span class="placeholder col-2"></span>
                                <span class="placeholder col-6" style="visibility: hidden"></span>
                                <span class="placeholder col-4"></span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code
{
    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    protected override void OnParametersSet()
    {
        if (State.UserDbId is null)
        {
            InitializeState();
        }
    }

    private async void InitializeState()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            string? userDbId = user.Claims.FirstOrDefault(x => x.Type.Equals("extension_DatabaseId"))?.Value;

            // The code below checks that the newUser token claim exists - but it might cause problems.
            // if (user.Claims.FirstOrDefault(x => x.Type.Equals("newUser"))?.Value is not null && userDbId is null)
            if (userDbId is null)
            {
                Navigation.NavigateTo("/newuser");
                return;
            }

            State.UserDbId = userDbId;

            var userGroups = await Service.GetUserMessageGroupsAsync(userDbId);
            State.UserGroups = userGroups;

            var firstGroup = userGroups?.FirstOrDefault();
            if (firstGroup is not null)
            {
                State.ActiveGroupId = firstGroup.Id;
                State.ActiveGroupName = firstGroup.MessageGroupName;

                var activeGroupPosts = await Service.GetNewPostsAsync(firstGroup.Id.ToString());
                State.PostCollection = activeGroupPosts;
            }
        }
    }

    private async void ClickAThing()
    {
        await Service.GetUserAsync("1");
    }
}
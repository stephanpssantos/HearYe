@page "/allgroups"
@layout AltLayout
@using HearYe.Client.Data
@using HearYe.Shared;
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject StateContainer State
@inject IHearYeService Service
@attribute [Authorize]

<PageTitle>Groups</PageTitle>

<div class="container-lg">
    <div class="modal fade" id="allGroupsModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            @if (State.ModalIsOpen)
            {
                @if (State.MembersModalId > 0)
                {
                    <MembersModal />
                }
                else if (State.InviteModalId > 0)
                {
                    <InviteModal />
                }
                else if (State.LeaveModalId > 0)
                {
                    <LeaveModal />
                }
            }
        </div>
    </div>
    <div class="d-flex flex-column align-items-center">
        <div class="w-md-75">
            <h1 class="mt-3">Groups</h1>
            <p class="text-muted">Your user ID is: @State.UserDbId</p>
            <h4>Default group</h4>
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    @(defaultMessageGroup is null ? "Select a default group" : defaultMessageGroup.MessageGroupName)
                </button>
                <ul class="dropdown-menu">
                    @if (State.UserGroups is not null)
                    {
                        @foreach (var group in State.UserGroups)
                        {
                            <li>
                                <button class="dropdown-item @(State.DefaultGroupId == group.Id ? "active" : "")"
                                    aria-current="@(State.DefaultGroupId == group.Id ? "true" : "false")"
                                    type="button" 
                                    @onclick="(() => SetDefaultGroup(group))">
                                    @group.MessageGroupName
                                </button>
                            </li>
                        }
                    }
                </ul>
            </div>
            <div class="mt-3" />
            <h4>Your groups</h4>
            <p class="text-muted">Click on the star icon next to a group name to add it to your group shortcuts.</p>
            @if (bannerMessage is not null && bannerType is not null)
            {
                <div class="alert @bannerType" role="alert">
                    @bannerMessage
                </div>
            }
            @if (State.UserGroups is not null && State.UserGroups.Any())
            {
                @foreach (var group in State.UserGroups)
                {
                    <div class="card mb-3">
                        <div class="card-body card-text d-flex flex-column flex-md-row justify-content-md-between align-items-center gap-2">
                            <div>
                                @if (State.UserShortcutGroups is not null && State.UserShortcutGroups.FirstOrDefault(g => g.Id == group.Id) is not null)
                                {
                                    <button type="button" class="btn btn-secondary" @onclick="(() => RemoveFromShortcuts(group.Id))">
                                        <StarIcon Filled=true FillColor="#FFCD3C" />
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-outline-secondary" @onclick="(() => AddToShortcuts(group.Id))">
                                        <StarIcon Filled=false FillColor="#333333" />
                                    </button>
                                }
                                <span class="p-1 ms-2 align-middle">@group.MessageGroupName</span>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-outline-secondary" @onclick="(() => GoToGroup(group.Id))">Go</button>
                                <button type="button" class="btn btn-outline-secondary" @onclick="(() => OpenModal(group.Id, 1))" data-bs-toggle="modal" data-bs-target="#allGroupsModal">Members</button>
                                <button type="button" class="btn btn-outline-secondary" @onclick="(() => OpenModal(group.Id, 2))" data-bs-toggle="modal" data-bs-target="#allGroupsModal">Invite</button>
                                <button type="button" class="btn btn-outline-danger" @onclick="(() => OpenModal(group.Id, 3))" data-bs-toggle="modal" data-bs-target="#allGroupsModal">Leave</button>
                            </div>
                        </div>
                    </div>
                }
            }
            else if (State.UserGroups is not null)
            {
                <div class="text-muted">Not in any groups.</div>
            }
            else
            {
                <div class="card">
                    <div class="card-body card-text">
                        <div class="card mb-3">
                            <div class="card-body card-text d-flex flex-column flex-lg-row justify-content-between align-items-center placeholder-glow">
                                <span class="p-1 placeholder col-2"></span>
                                <div class="d-flex gap-2 col-6">
                                    <span class="placeholder col-4"></span>
                                    <span class="placeholder col-4"></span>
                                    <span class="placeholder col-3"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string? bannerMessage;
    private string? bannerType;
    private MessageGroup? defaultMessageGroup;

    protected override async Task OnParametersSetAsync()
    {
        // In case user arrives here first
        if (State.UserDbId is null)
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;
            if (user.Identity is null || !user.Identity.IsAuthenticated)
            {
                Navigation.NavigateTo("/");
            }

            string? userDbId = user.Claims.FirstOrDefault(x => x.Type.Equals("extension_DatabaseId"))?.Value;
            if (userDbId is null)
            {
                Navigation.NavigateTo("/newuser");
            }

            State.UserDbId = userDbId;
        }

        if (State.UserGroups is null)
        {
            var userGroups = await Service.GetUserMessageGroupsAsync(State.UserDbId!);
            State.UserGroups = userGroups;
        }

        defaultMessageGroup = State.UserGroups!.FirstOrDefault(g => g.Id == State.DefaultGroupId);
        State.ActiveLocation = ActiveLocations.Groups;
    }

    private async void AddToShortcuts(int groupId)
    {
        bool validDbId = int.TryParse(State.UserDbId, out int userDbId);
        if (!validDbId)
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ Failed to add shortcut. Please try again later.";
            StateHasChanged();
            return;
        }

        MessageGroupShortcut newShortcut = new()
            {
                UserId = userDbId,
                MessageGroupId = groupId,
            };

        var added = await Service.NewMessageGroupShortcutAsync(newShortcut);

        if (added.IsSuccessStatusCode)
        {
            var groupToAdd = State.UserGroups!.First(g => g.Id == groupId);
            State.UserShortcutGroups = State.UserShortcutGroups!.Append(groupToAdd);
        }
        else
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ Failed to add shortcut. Please try again later.";
            StateHasChanged();
        }
    }

    private async void RemoveFromShortcuts(int groupId)
    {
        bool validDbId = int.TryParse(State.UserDbId, out int userDbId);
        if (!validDbId)
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ Failed to remove shortcut. Please try again later.";
            StateHasChanged();
            return;
        }

        var removed = await Service.DeleteMessageGroupShortcutAsync(userDbId, groupId);

        if (removed.IsSuccessStatusCode)
        {
            State.UserShortcutGroups = State.UserShortcutGroups!.Where(g => g.Id != groupId).ToList();
        }
        else
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ Failed to remove shortcut. Please try again later.";
            StateHasChanged();
        }
    }

    private async void SetDefaultGroup(MessageGroup group)
    {
        if (State.DefaultGroupId == group.Id)
        {
            return;
        }

        var getUser = await Service.GetUserAsync(State.UserDbId ?? "0");
        if (getUser is null)
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ Failed to set default group. Please try again later.";
            StateHasChanged();
            return;
        }

        getUser.DefaultGroupId = group.Id;
        var updateUser = await Service.UpdateUserAsync(getUser.Id, getUser);

        if (updateUser.IsSuccessStatusCode)
        {
            defaultMessageGroup = group;
            State.DefaultGroupId = group.Id;
        }
        else
        {
            bannerType = "alert-warning";
            bannerMessage = "⚠ Failed to set default group. Please try again later.";
            StateHasChanged();
        }

        return;
    }

    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    private async void GoToGroup(int groupId)
    {
        var groupInfo = State.UserGroups!.First(g => g.Id == groupId);

        var groupPosts = await Service.GetNewPostsAsync(groupId.ToString());

        State.PostCollection = groupPosts;
        State.ActiveGroupId = groupId;
        State.ActiveGroupName = groupInfo.MessageGroupName;

        Navigation.NavigateTo("/");
    }

    private void OpenModal(int id, int modal)
    {
        State.MembersModalId = modal == 1 ? id : 0;
        State.InviteModalId = modal == 2 ? id : 0;
        State.LeaveModalId = modal == 3 ? id : 0;
        State.ModalIsOpen = true;
    }
}
